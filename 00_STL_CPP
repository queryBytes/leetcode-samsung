1. min(a, b)
2. typedef long long ll [Right]  #define ll long long [wrong]
3. sort(arr, arr + n)
4. binary_search(v.begin(), v.end(), 23)
5. it = lower_bound(v.begin(), v.end(), 30)   _____ index = it - v.begin()  {only for sorted}
        vector<int>::iterator low1, low2, low3;
        Input: 10 20 30 40 50
        Output: lower_bound for element 35 at index 3

6. it = upper_bound(v.begin(), v.end(), 35)   _____ index = it - v.begin() {only for sorted}
        Input : 10 20 30 30 40 50
        Output : upper_bound for element 30 is at index 4

7. map<int, int>::iterator itr;
        for (itr = map.begin(); itr != map.end(); ++itr)
        [map] itr->first, itr->second(print key)
        map.erase(4) [remove all element with key 4]
        map.size();
        map[key]=value [insert]
        cout<<map1[key]
        map store the element in sorted order by key

        unordered_map<int, int>

9.  vector<int> v;
        v.push_back(1);
        v.size();
        sort(v.begin(), v.end())
        reverse(v.begin(), v.end());

        for (int i = 0; i < v.size(); i++)
        cout << v1[i] << " ";

        v.clear();
        v.erase(iterator) [only with iterator]

10. String
        string r = s1.substr(1, 3) [start, len]
        // Deletes 4 characters from index number 1
        str.erase(1, 4);

11.     abs() [convert to positive]
        int i=stoi("23");
        string s = i.to_string();

12. stack<int> st;
        st.push(10)
        st.pop()
        st.top()
        st.size()
        st.empty()

13. queue<int> q
        q.push(10)
        q.pop()
        q.front()
        q.back()
        q.size()
        q.empty()

14. Tree
        BFS(preorder, inorder, postorder), DFS(orderlevel)


15. Graph
        BFS(queue), DFS(stack)


16. FAST INPUT/OUTPUT(c++)
        std::ios::sync_with_stdio(false);

17. set
        set<int> val;
        val.insert(20);
        val.erase(20);
        val.size();
        begin, end